Overall, my design mentality for this project was putting all the methods in the class where either the name of the method made sense, or it accessed data from the object multiple times. There was a balance to this process and in situations such as scheduleAction, it can be difficult as the name suggests it should belong to the eventScheduler class, yet it uses data from the entityClass. Entity was the most accesses class, hence has the most methods within its class, along with majority of the static variables from the Functions class. I have completely emptied the Functions class, yet there are a couple methods that I have static in other classes, where they are most often used. For example, adjacent is a function, yet it’s parameters are points, hence I have left it as a static variable in the point class. My reasoning for leaving it static despite it using a point class is I feel the method is much more readable and understandable when you see the two parameters are being compared to each other

I feel all of the parse methods could go either or between worldModel or the entity class. As I felt the entity class was crowded, worldModel typically deals with loading or parsing other objects such as the background, so for cohesionI placed it in worldModel. One draw back, is duplicating the static ints into the world model class.


Clamp and hashCode are both functions that I made the decision to put into classes other than functions. Clamp seemed to be used in WorldView, so I moved it into that class. hashCode I don’t fully understand the functionality and the program ran without hashCode in the program, nonetheless, I put it in the point class as it uses x and y and those are final variables in the point class. I will inquire about it’s use and may end returning it back to the Functions class.